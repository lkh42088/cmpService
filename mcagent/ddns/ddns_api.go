package ddns

import (
	"bufio"
	"cmpService/common/mcmodel"
	"fmt"
	"os"
	"os/exec"
)

var ddConfig = "/etc/ddclient.conf"

func CreateDdnsConfig(prefix, id, passwd string) bool {
	fmt.Printf(">>> CreateDdnsConfig: %s %s %s\n", prefix, id, passwd)
	fd, err := os.Create(ddConfig)
	if err != nil {
		fmt.Println("CreateDdnsConfig: error", err)
		return false
	}
	defer fd.Close()

	w := bufio.NewWriter(fd)
	w.WriteString(fmt.Sprintf("# Generated by mcagent\n"))
	w.WriteString(fmt.Sprintf("# /etc/ddclient.conf\n"))
	w.WriteString(fmt.Sprintf("\n"))
	w.WriteString(fmt.Sprintf("protocol=dyndns2\n"))
	w.WriteString(fmt.Sprintf("use=web\n"))
	w.WriteString(fmt.Sprintf("ssl=yes\n"))
	w.WriteString(fmt.Sprintf("server=domains.google.com\n"))
	w.WriteString(fmt.Sprintf("login=%s\n", id))
	w.WriteString(fmt.Sprintf("password=%s\n", passwd))
	w.WriteString(fmt.Sprintf("%s.nubes-bridge.com\n", prefix))
	w.WriteString(fmt.Sprintf("\n"))
	w.Flush()
	fd.Sync()
	return true
}

func DoDdnsClient() bool {
	args := []string{
		"-daemon=0",
		"-debug",
		//"-verbos",
		//"-noquiet",
	}

	binary := "ddclient"
	cmd := exec.Command(binary, args...)
	output, err := cmd.Output()
	if err != nil {
		fmt.Println("DoDdnsClient: error ", err)
		return false
	}
	fmt.Println("DoDdnsClient:", string(output))
	return true
}

func ApplyDdns(s mcmodel.McServer) bool {
	var res = false
	if s.RegisterType == 1  && len(s.DomainPrefix) > 0 &&
		len(s.DomainId) > 0 && len(s.DomainPassword) > 0 {
		res = CreateDdnsConfig(s.DomainPrefix, s.DomainId, s.DomainPassword)
		if res == true {
			res = DoDdnsClient()
		}
	}
	return res
}